# file pyproject.toml

[project]
name = "qiskit-qward"
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE.txt"}
description = "A framework for analyzing and validating quantum code execution quality on quantum processing units (QPUs)"
authors = [
   {name = "Thecap", email = "xthecapx@gmail.com"}
]

dependencies = [
    "qiskit>=1.4.1,<2.0.0",
    "qiskit-aer>=0.16.3",
    "qiskit-ibm-runtime>=0.36.1",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "python-dotenv>=1.0.0",
    "pylatexenc",
    "ibm-cloud-sdk-core>=3.23.0",
    "ibm-platform-services>=0.59.1",
    "pydantic-settings",
    "requests>=2.32.3",
    "statsmodels",
    "importlib_metadata>=4.8.1",
    "dotenv",
    "myst-parser==3.0.1"
]

[project.optional-dependencies]
dev = [
    "coverage>=5.5",
    "pylint>=2.9.5",
    "nbqa>=1.1.1",
    "treon>=0.1.3",
    "pytest>=6.2.5",
    "pytest-randomly>=1.2.0",
    "mypy>=0.780",
    "mypy-extensions>=0.4.3",
    "jupyter-sphinx>=0.3.2",
    "nbsphinx>=0.8.8",
    "sphinx-autodoc-typehints>=1.17.0",
    "qiskit-sphinx-theme~=1.16.0",
    "reno>=3.5.0",
    "black[jupyter]~=22.1"
]

[project.urls]
Homepage = "https://github.com/xthecapx/qiskit-qward"
"Bug Tracker" = "https://github.com/xthecapx/qiskit-qward/issues"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
py-modules = []

[tool.setuptools.package-data]
qiskit_qward = ["VERSION.txt"]

[tool.setuptools.packages.find]
include = ["qiskit_qward*"]
exclude = ["qiskit_qward*tests"]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310"]

[tool.pylint.main]
extension-pkg-allow-list = [
    "numpy",
    "qiskit"
]
load-plugins = ["pylint.extensions.docparams", "pylint.extensions.docstyle"]
py-version = "3.8"

[tool.pylint.basic]
good-names = ["a", "b", "i", "j", "k", "d", "n", "m", "ex", "v", "w", "x", "y", "z", "Run", "_", "logger", "q", "c", "r", "qr", "cr", "qc", "nd", "pi", "op", "b", "ar", "br", "p", "cp", "ax", "dt", "__unittest"]
method-rgx = "(([a-z_][a-z0-9_]{2,49})|(assert[A-Z][a-zA-Z0-9]{2,43})|(test_[_a-zA-Z0-9]{2,}))$"
variable-rgx = "[a-z_][a-z0-9_]{1,30}$"

[tool.pylint.format]
max-line-length = 105

[tool.pylint."messages control"]
disable = [
    "spelling",
    "fixme",
    "protected-access",
    "duplicate-code",
    "redundant-returns-doc",
    "too-many-lines", "too-many-branches", "too-many-locals", "too-many-nested-blocks", "too-many-statements",
    "too-many-instance-attributes", "too-many-arguments", "too-many-public-methods", "too-few-public-methods", "too-many-ancestors",
    "unnecessary-pass",
    "no-else-return",
    "docstring-first-line-empty",
    "import-outside-toplevel", "import-error",
    "arguments-renamed",
    "broad-exception-raised",
    "consider-iterating-dictionary",
    "consider-using-dict-items",
    "consider-using-enumerate",
    "consider-using-f-string",
    "modified-iterating-list",
    "nested-min-max",
    "no-member",
    "no-value-for-parameter",
    "non-ascii-name",
    "not-context-manager",
    "superfluous-parens",
    "unknown-option-value",
    "unexpected-keyword-arg",
    "unnecessary-dict-index-lookup",
    "unnecessary-direct-lambda-call",
    "unnecessary-dunder-call",
    "unnecessary-ellipsis",
    "unnecessary-lambda-assignment",
    "unnecessary-list-index-lookup",
    "unspecified-encoding",
    "unsupported-assignment-operation",
    "use-dict-literal",
    "use-list-literal",
    "use-implicit-booleaness-not-comparison",
    "use-maxsplit-arg"
]
enable = [
    "use-symbolic-message-instead"
]

[tool.pylint.spelling]
spelling-private-dict-file = ".pylintdict"
spelling-store-unknown-words = "n"
